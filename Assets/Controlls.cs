//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Controlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controlls"",
    ""maps"": [
        {
            ""name"": ""Xbox"",
            ""id"": ""aac71d3e-0d3f-40b1-a619-ea9204418df4"",
            ""actions"": [
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""268f24ee-d23e-4250-8f95-313cb2f703cd"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StabMode"",
                    ""type"": ""Value"",
                    ""id"": ""4bb0d2a2-e4af-486c-867c-01bce233f6f6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""53731dc9-3045-4ea5-b16c-ffbb4b83102c"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""873f2780-b554-4d38-bd16-7e9860174d3e"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""1bd44f69-4148-4364-b476-c13addfc5b69"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f4608bb5-1752-4fcd-b3c6-ef04840153c4"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7320f333-e939-43de-81fb-e9aa7189ef04"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88e375de-89d9-4894-838c-2170c1c7e120"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dda95106-c42d-4eaf-82ec-be4d7012cd45"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32eca042-daa8-4c2c-96b4-f7b99e078aa5"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StabMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""id"": ""990dad40-a214-47ce-9d31-eaeb578a6d84"",
            ""actions"": [
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""ebc2b660-cac8-48c1-b42d-fd539052c87a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StabMode"",
                    ""type"": ""Value"",
                    ""id"": ""6c0ff08f-7127-4f3b-9ec8-a7b0b1f83f2d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""3a21368a-6b50-40a7-a878-30d102bb2714"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""ca30d764-f216-44cf-b545-a2567ba649cc"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""6f93ddf4-d8fe-44f1-bb10-40e3a8c3b1d9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f272e2dc-fc47-44af-925b-a0d031d0214b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""399ddae8-63d7-45e9-b9a4-d07ba4de07fe"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ac3019f6-634b-4a76-a345-6f7f0e3a5d4a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0dab9d48-48ff-46e7-828b-786fc67b4cb9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""58dedff5-1892-4e53-9c4a-72c1d0038cf8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""74d9f80c-5410-43fb-9006-759b116f4060"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c7655e9c-b51b-4801-a46d-1a151eddf04a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6fef836f-56bc-4801-8dae-350ab816be51"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""78977d60-8168-4650-9dcf-afa9b8687027"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ea9c4867-5e93-4b7b-bd54-74c52673797c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0cb3e9ba-bbf6-4b64-be2b-f768a71db8bc"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""StabMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FrSkyTaranis"",
            ""id"": ""ab219437-605f-40e9-b8b8-948fda11e0b2"",
            ""actions"": [
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""e5964efc-35d8-4867-879c-4056862e720f"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StabMode"",
                    ""type"": ""Value"",
                    ""id"": ""c926830c-8abc-4867-a18a-9b73f1378653"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""05f81592-08e0-4e49-9eed-c4406a3574a2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""29cb807c-907d-42fa-aea1-4ef7082c7563"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""39bdff9d-b7cf-459d-a55b-51ef7eeb28fc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e91c2cff-340c-46a4-8ca7-08ed4d188fe1"",
                    ""path"": ""<HID::FrSky FrSky Taranis Joystick>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a1063c5-ed57-47d6-8c21-99ca905004a7"",
                    ""path"": ""<HID::FrSky FrSky Taranis Joystick>/rx"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ddad8d8-4c28-4bfe-8c9c-ff489fa0b7f9"",
                    ""path"": ""<Joystick>/stick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10e38adb-cf50-4be1-b2a2-2fa3e2de4657"",
                    ""path"": ""<HID::FrSky FrSky Taranis Joystick>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c161f8fb-7233-4a56-b61a-c465607d904e"",
                    ""path"": ""<HID::FrSky FrSky Taranis Joystick>/ry"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StabMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FSI6S Emulator"",
            ""id"": ""41406c99-fde5-4a18-bdd3-15838a9369e8"",
            ""actions"": [
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""f90e9fd9-724b-47ea-8653-a46f83728070"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""19865c9f-6eeb-405a-a7ce-ceec2ffe8205"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""da9fab1c-b9d8-45bb-b4d2-971f0b3f34e2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""b26352fd-de20-426e-a96d-5b914972725b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fef78e7d-ec1a-493d-9e71-8c8aa84f7455"",
                    ""path"": ""<HID::Flysky FS-i6S emulator>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e08dc967-04bc-4d89-aeac-e2424d298350"",
                    ""path"": ""<HID::Flysky FS-i6S emulator>/rx"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b2449e5-a6c4-43e4-8cb8-a527f9d85b22"",
                    ""path"": ""<HID::Flysky FS-i6S emulator>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""445a6364-9c52-4120-b317-85538edf85df"",
                    ""path"": ""<HID::Flysky FS-i6S emulator>/stick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FrSkyTaranisX7"",
            ""id"": ""af13da8c-b0d1-482f-8807-fc76af567029"",
            ""actions"": [
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""37b34782-3955-4d9e-aefa-23ea6dc26c4f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""15ccd17b-ca74-4b4f-9ffe-42cf847d573e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""4098a435-7a0f-41e7-a8fb-3e9a14f740be"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""1af0e7d1-932d-45d6-a5b7-cb5fc35e6fcd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StabMode"",
                    ""type"": ""Value"",
                    ""id"": ""1bda4153-60be-4c2a-ae05-e463934b4480"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ac05b999-715a-49bc-8126-f859be864db7"",
                    ""path"": ""<HID::OpenTX FrSky Taranis Joystick>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5b9e0e4-1e7f-4835-81e5-dacda4f5bffd"",
                    ""path"": ""<HID::OpenTX FrSky Taranis Joystick>/rx"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4cbcec97-fd38-428a-ba58-ad7d3deb1174"",
                    ""path"": ""<HID::OpenTX FrSky Taranis Joystick>/stick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0600278-c5c8-4fe6-b919-0a4fa73b7307"",
                    ""path"": ""<HID::OpenTX FrSky Taranis Joystick>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cdc80a4c-f67b-473d-a4f6-e39e1fb84bb1"",
                    ""path"": ""<HID::OpenTX FrSky Taranis Joystick>/ry"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StabMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Other"",
            ""id"": ""60f8af92-43ca-4a0c-9798-9213525b3c05"",
            ""actions"": [
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""065e6510-582f-400a-b976-586fdf9c3c14"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""a2ecc59a-ad86-4249-8700-1cc33dc325d2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""1dea8daa-2cb5-4cc3-8da7-ec72b53b6a9a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""0fe6a926-28ad-4dac-99db-3dd445d6b1dc"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""492f1321-48dd-4c87-b763-1e96ae1b79d9"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""952a2fb1-796a-45ab-8e9c-3befb678b107"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02d5918e-4e4f-46db-9ac5-8afc68c4c74e"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd716417-3ebf-4400-82e7-825d06cf3cce"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<HID>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Xbox
        m_Xbox = asset.FindActionMap("Xbox", throwIfNotFound: true);
        m_Xbox_Throttle = m_Xbox.FindAction("Throttle", throwIfNotFound: true);
        m_Xbox_StabMode = m_Xbox.FindAction("StabMode", throwIfNotFound: true);
        m_Xbox_Yaw = m_Xbox.FindAction("Yaw", throwIfNotFound: true);
        m_Xbox_Roll = m_Xbox.FindAction("Roll", throwIfNotFound: true);
        m_Xbox_Pitch = m_Xbox.FindAction("Pitch", throwIfNotFound: true);
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_Throttle = m_Keyboard.FindAction("Throttle", throwIfNotFound: true);
        m_Keyboard_StabMode = m_Keyboard.FindAction("StabMode", throwIfNotFound: true);
        m_Keyboard_Yaw = m_Keyboard.FindAction("Yaw", throwIfNotFound: true);
        m_Keyboard_Roll = m_Keyboard.FindAction("Roll", throwIfNotFound: true);
        m_Keyboard_Pitch = m_Keyboard.FindAction("Pitch", throwIfNotFound: true);
        // FrSkyTaranis
        m_FrSkyTaranis = asset.FindActionMap("FrSkyTaranis", throwIfNotFound: true);
        m_FrSkyTaranis_Throttle = m_FrSkyTaranis.FindAction("Throttle", throwIfNotFound: true);
        m_FrSkyTaranis_StabMode = m_FrSkyTaranis.FindAction("StabMode", throwIfNotFound: true);
        m_FrSkyTaranis_Yaw = m_FrSkyTaranis.FindAction("Yaw", throwIfNotFound: true);
        m_FrSkyTaranis_Roll = m_FrSkyTaranis.FindAction("Roll", throwIfNotFound: true);
        m_FrSkyTaranis_Pitch = m_FrSkyTaranis.FindAction("Pitch", throwIfNotFound: true);
        // FSI6S Emulator
        m_FSI6SEmulator = asset.FindActionMap("FSI6S Emulator", throwIfNotFound: true);
        m_FSI6SEmulator_Throttle = m_FSI6SEmulator.FindAction("Throttle", throwIfNotFound: true);
        m_FSI6SEmulator_Yaw = m_FSI6SEmulator.FindAction("Yaw", throwIfNotFound: true);
        m_FSI6SEmulator_Roll = m_FSI6SEmulator.FindAction("Roll", throwIfNotFound: true);
        m_FSI6SEmulator_Pitch = m_FSI6SEmulator.FindAction("Pitch", throwIfNotFound: true);
        // FrSkyTaranisX7
        m_FrSkyTaranisX7 = asset.FindActionMap("FrSkyTaranisX7", throwIfNotFound: true);
        m_FrSkyTaranisX7_Throttle = m_FrSkyTaranisX7.FindAction("Throttle", throwIfNotFound: true);
        m_FrSkyTaranisX7_Yaw = m_FrSkyTaranisX7.FindAction("Yaw", throwIfNotFound: true);
        m_FrSkyTaranisX7_Roll = m_FrSkyTaranisX7.FindAction("Roll", throwIfNotFound: true);
        m_FrSkyTaranisX7_Pitch = m_FrSkyTaranisX7.FindAction("Pitch", throwIfNotFound: true);
        m_FrSkyTaranisX7_StabMode = m_FrSkyTaranisX7.FindAction("StabMode", throwIfNotFound: true);
        // Other
        m_Other = asset.FindActionMap("Other", throwIfNotFound: true);
        m_Other_Throttle = m_Other.FindAction("Throttle", throwIfNotFound: true);
        m_Other_Yaw = m_Other.FindAction("Yaw", throwIfNotFound: true);
        m_Other_Roll = m_Other.FindAction("Roll", throwIfNotFound: true);
        m_Other_Pitch = m_Other.FindAction("Pitch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Xbox
    private readonly InputActionMap m_Xbox;
    private IXboxActions m_XboxActionsCallbackInterface;
    private readonly InputAction m_Xbox_Throttle;
    private readonly InputAction m_Xbox_StabMode;
    private readonly InputAction m_Xbox_Yaw;
    private readonly InputAction m_Xbox_Roll;
    private readonly InputAction m_Xbox_Pitch;
    public struct XboxActions
    {
        private @Controlls m_Wrapper;
        public XboxActions(@Controlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Throttle => m_Wrapper.m_Xbox_Throttle;
        public InputAction @StabMode => m_Wrapper.m_Xbox_StabMode;
        public InputAction @Yaw => m_Wrapper.m_Xbox_Yaw;
        public InputAction @Roll => m_Wrapper.m_Xbox_Roll;
        public InputAction @Pitch => m_Wrapper.m_Xbox_Pitch;
        public InputActionMap Get() { return m_Wrapper.m_Xbox; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XboxActions set) { return set.Get(); }
        public void SetCallbacks(IXboxActions instance)
        {
            if (m_Wrapper.m_XboxActionsCallbackInterface != null)
            {
                @Throttle.started -= m_Wrapper.m_XboxActionsCallbackInterface.OnThrottle;
                @Throttle.performed -= m_Wrapper.m_XboxActionsCallbackInterface.OnThrottle;
                @Throttle.canceled -= m_Wrapper.m_XboxActionsCallbackInterface.OnThrottle;
                @StabMode.started -= m_Wrapper.m_XboxActionsCallbackInterface.OnStabMode;
                @StabMode.performed -= m_Wrapper.m_XboxActionsCallbackInterface.OnStabMode;
                @StabMode.canceled -= m_Wrapper.m_XboxActionsCallbackInterface.OnStabMode;
                @Yaw.started -= m_Wrapper.m_XboxActionsCallbackInterface.OnYaw;
                @Yaw.performed -= m_Wrapper.m_XboxActionsCallbackInterface.OnYaw;
                @Yaw.canceled -= m_Wrapper.m_XboxActionsCallbackInterface.OnYaw;
                @Roll.started -= m_Wrapper.m_XboxActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_XboxActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_XboxActionsCallbackInterface.OnRoll;
                @Pitch.started -= m_Wrapper.m_XboxActionsCallbackInterface.OnPitch;
                @Pitch.performed -= m_Wrapper.m_XboxActionsCallbackInterface.OnPitch;
                @Pitch.canceled -= m_Wrapper.m_XboxActionsCallbackInterface.OnPitch;
            }
            m_Wrapper.m_XboxActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Throttle.started += instance.OnThrottle;
                @Throttle.performed += instance.OnThrottle;
                @Throttle.canceled += instance.OnThrottle;
                @StabMode.started += instance.OnStabMode;
                @StabMode.performed += instance.OnStabMode;
                @StabMode.canceled += instance.OnStabMode;
                @Yaw.started += instance.OnYaw;
                @Yaw.performed += instance.OnYaw;
                @Yaw.canceled += instance.OnYaw;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Pitch.started += instance.OnPitch;
                @Pitch.performed += instance.OnPitch;
                @Pitch.canceled += instance.OnPitch;
            }
        }
    }
    public XboxActions @Xbox => new XboxActions(this);

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private IKeyboardActions m_KeyboardActionsCallbackInterface;
    private readonly InputAction m_Keyboard_Throttle;
    private readonly InputAction m_Keyboard_StabMode;
    private readonly InputAction m_Keyboard_Yaw;
    private readonly InputAction m_Keyboard_Roll;
    private readonly InputAction m_Keyboard_Pitch;
    public struct KeyboardActions
    {
        private @Controlls m_Wrapper;
        public KeyboardActions(@Controlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Throttle => m_Wrapper.m_Keyboard_Throttle;
        public InputAction @StabMode => m_Wrapper.m_Keyboard_StabMode;
        public InputAction @Yaw => m_Wrapper.m_Keyboard_Yaw;
        public InputAction @Roll => m_Wrapper.m_Keyboard_Roll;
        public InputAction @Pitch => m_Wrapper.m_Keyboard_Pitch;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterface != null)
            {
                @Throttle.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnThrottle;
                @Throttle.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnThrottle;
                @Throttle.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnThrottle;
                @StabMode.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnStabMode;
                @StabMode.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnStabMode;
                @StabMode.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnStabMode;
                @Yaw.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnYaw;
                @Yaw.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnYaw;
                @Yaw.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnYaw;
                @Roll.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRoll;
                @Pitch.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnPitch;
                @Pitch.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnPitch;
                @Pitch.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnPitch;
            }
            m_Wrapper.m_KeyboardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Throttle.started += instance.OnThrottle;
                @Throttle.performed += instance.OnThrottle;
                @Throttle.canceled += instance.OnThrottle;
                @StabMode.started += instance.OnStabMode;
                @StabMode.performed += instance.OnStabMode;
                @StabMode.canceled += instance.OnStabMode;
                @Yaw.started += instance.OnYaw;
                @Yaw.performed += instance.OnYaw;
                @Yaw.canceled += instance.OnYaw;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Pitch.started += instance.OnPitch;
                @Pitch.performed += instance.OnPitch;
                @Pitch.canceled += instance.OnPitch;
            }
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);

    // FrSkyTaranis
    private readonly InputActionMap m_FrSkyTaranis;
    private IFrSkyTaranisActions m_FrSkyTaranisActionsCallbackInterface;
    private readonly InputAction m_FrSkyTaranis_Throttle;
    private readonly InputAction m_FrSkyTaranis_StabMode;
    private readonly InputAction m_FrSkyTaranis_Yaw;
    private readonly InputAction m_FrSkyTaranis_Roll;
    private readonly InputAction m_FrSkyTaranis_Pitch;
    public struct FrSkyTaranisActions
    {
        private @Controlls m_Wrapper;
        public FrSkyTaranisActions(@Controlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Throttle => m_Wrapper.m_FrSkyTaranis_Throttle;
        public InputAction @StabMode => m_Wrapper.m_FrSkyTaranis_StabMode;
        public InputAction @Yaw => m_Wrapper.m_FrSkyTaranis_Yaw;
        public InputAction @Roll => m_Wrapper.m_FrSkyTaranis_Roll;
        public InputAction @Pitch => m_Wrapper.m_FrSkyTaranis_Pitch;
        public InputActionMap Get() { return m_Wrapper.m_FrSkyTaranis; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FrSkyTaranisActions set) { return set.Get(); }
        public void SetCallbacks(IFrSkyTaranisActions instance)
        {
            if (m_Wrapper.m_FrSkyTaranisActionsCallbackInterface != null)
            {
                @Throttle.started -= m_Wrapper.m_FrSkyTaranisActionsCallbackInterface.OnThrottle;
                @Throttle.performed -= m_Wrapper.m_FrSkyTaranisActionsCallbackInterface.OnThrottle;
                @Throttle.canceled -= m_Wrapper.m_FrSkyTaranisActionsCallbackInterface.OnThrottle;
                @StabMode.started -= m_Wrapper.m_FrSkyTaranisActionsCallbackInterface.OnStabMode;
                @StabMode.performed -= m_Wrapper.m_FrSkyTaranisActionsCallbackInterface.OnStabMode;
                @StabMode.canceled -= m_Wrapper.m_FrSkyTaranisActionsCallbackInterface.OnStabMode;
                @Yaw.started -= m_Wrapper.m_FrSkyTaranisActionsCallbackInterface.OnYaw;
                @Yaw.performed -= m_Wrapper.m_FrSkyTaranisActionsCallbackInterface.OnYaw;
                @Yaw.canceled -= m_Wrapper.m_FrSkyTaranisActionsCallbackInterface.OnYaw;
                @Roll.started -= m_Wrapper.m_FrSkyTaranisActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_FrSkyTaranisActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_FrSkyTaranisActionsCallbackInterface.OnRoll;
                @Pitch.started -= m_Wrapper.m_FrSkyTaranisActionsCallbackInterface.OnPitch;
                @Pitch.performed -= m_Wrapper.m_FrSkyTaranisActionsCallbackInterface.OnPitch;
                @Pitch.canceled -= m_Wrapper.m_FrSkyTaranisActionsCallbackInterface.OnPitch;
            }
            m_Wrapper.m_FrSkyTaranisActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Throttle.started += instance.OnThrottle;
                @Throttle.performed += instance.OnThrottle;
                @Throttle.canceled += instance.OnThrottle;
                @StabMode.started += instance.OnStabMode;
                @StabMode.performed += instance.OnStabMode;
                @StabMode.canceled += instance.OnStabMode;
                @Yaw.started += instance.OnYaw;
                @Yaw.performed += instance.OnYaw;
                @Yaw.canceled += instance.OnYaw;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Pitch.started += instance.OnPitch;
                @Pitch.performed += instance.OnPitch;
                @Pitch.canceled += instance.OnPitch;
            }
        }
    }
    public FrSkyTaranisActions @FrSkyTaranis => new FrSkyTaranisActions(this);

    // FSI6S Emulator
    private readonly InputActionMap m_FSI6SEmulator;
    private IFSI6SEmulatorActions m_FSI6SEmulatorActionsCallbackInterface;
    private readonly InputAction m_FSI6SEmulator_Throttle;
    private readonly InputAction m_FSI6SEmulator_Yaw;
    private readonly InputAction m_FSI6SEmulator_Roll;
    private readonly InputAction m_FSI6SEmulator_Pitch;
    public struct FSI6SEmulatorActions
    {
        private @Controlls m_Wrapper;
        public FSI6SEmulatorActions(@Controlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Throttle => m_Wrapper.m_FSI6SEmulator_Throttle;
        public InputAction @Yaw => m_Wrapper.m_FSI6SEmulator_Yaw;
        public InputAction @Roll => m_Wrapper.m_FSI6SEmulator_Roll;
        public InputAction @Pitch => m_Wrapper.m_FSI6SEmulator_Pitch;
        public InputActionMap Get() { return m_Wrapper.m_FSI6SEmulator; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FSI6SEmulatorActions set) { return set.Get(); }
        public void SetCallbacks(IFSI6SEmulatorActions instance)
        {
            if (m_Wrapper.m_FSI6SEmulatorActionsCallbackInterface != null)
            {
                @Throttle.started -= m_Wrapper.m_FSI6SEmulatorActionsCallbackInterface.OnThrottle;
                @Throttle.performed -= m_Wrapper.m_FSI6SEmulatorActionsCallbackInterface.OnThrottle;
                @Throttle.canceled -= m_Wrapper.m_FSI6SEmulatorActionsCallbackInterface.OnThrottle;
                @Yaw.started -= m_Wrapper.m_FSI6SEmulatorActionsCallbackInterface.OnYaw;
                @Yaw.performed -= m_Wrapper.m_FSI6SEmulatorActionsCallbackInterface.OnYaw;
                @Yaw.canceled -= m_Wrapper.m_FSI6SEmulatorActionsCallbackInterface.OnYaw;
                @Roll.started -= m_Wrapper.m_FSI6SEmulatorActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_FSI6SEmulatorActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_FSI6SEmulatorActionsCallbackInterface.OnRoll;
                @Pitch.started -= m_Wrapper.m_FSI6SEmulatorActionsCallbackInterface.OnPitch;
                @Pitch.performed -= m_Wrapper.m_FSI6SEmulatorActionsCallbackInterface.OnPitch;
                @Pitch.canceled -= m_Wrapper.m_FSI6SEmulatorActionsCallbackInterface.OnPitch;
            }
            m_Wrapper.m_FSI6SEmulatorActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Throttle.started += instance.OnThrottle;
                @Throttle.performed += instance.OnThrottle;
                @Throttle.canceled += instance.OnThrottle;
                @Yaw.started += instance.OnYaw;
                @Yaw.performed += instance.OnYaw;
                @Yaw.canceled += instance.OnYaw;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Pitch.started += instance.OnPitch;
                @Pitch.performed += instance.OnPitch;
                @Pitch.canceled += instance.OnPitch;
            }
        }
    }
    public FSI6SEmulatorActions @FSI6SEmulator => new FSI6SEmulatorActions(this);

    // FrSkyTaranisX7
    private readonly InputActionMap m_FrSkyTaranisX7;
    private IFrSkyTaranisX7Actions m_FrSkyTaranisX7ActionsCallbackInterface;
    private readonly InputAction m_FrSkyTaranisX7_Throttle;
    private readonly InputAction m_FrSkyTaranisX7_Yaw;
    private readonly InputAction m_FrSkyTaranisX7_Roll;
    private readonly InputAction m_FrSkyTaranisX7_Pitch;
    private readonly InputAction m_FrSkyTaranisX7_StabMode;
    public struct FrSkyTaranisX7Actions
    {
        private @Controlls m_Wrapper;
        public FrSkyTaranisX7Actions(@Controlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Throttle => m_Wrapper.m_FrSkyTaranisX7_Throttle;
        public InputAction @Yaw => m_Wrapper.m_FrSkyTaranisX7_Yaw;
        public InputAction @Roll => m_Wrapper.m_FrSkyTaranisX7_Roll;
        public InputAction @Pitch => m_Wrapper.m_FrSkyTaranisX7_Pitch;
        public InputAction @StabMode => m_Wrapper.m_FrSkyTaranisX7_StabMode;
        public InputActionMap Get() { return m_Wrapper.m_FrSkyTaranisX7; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FrSkyTaranisX7Actions set) { return set.Get(); }
        public void SetCallbacks(IFrSkyTaranisX7Actions instance)
        {
            if (m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface != null)
            {
                @Throttle.started -= m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface.OnThrottle;
                @Throttle.performed -= m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface.OnThrottle;
                @Throttle.canceled -= m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface.OnThrottle;
                @Yaw.started -= m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface.OnYaw;
                @Yaw.performed -= m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface.OnYaw;
                @Yaw.canceled -= m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface.OnYaw;
                @Roll.started -= m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface.OnRoll;
                @Pitch.started -= m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface.OnPitch;
                @Pitch.performed -= m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface.OnPitch;
                @Pitch.canceled -= m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface.OnPitch;
                @StabMode.started -= m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface.OnStabMode;
                @StabMode.performed -= m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface.OnStabMode;
                @StabMode.canceled -= m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface.OnStabMode;
            }
            m_Wrapper.m_FrSkyTaranisX7ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Throttle.started += instance.OnThrottle;
                @Throttle.performed += instance.OnThrottle;
                @Throttle.canceled += instance.OnThrottle;
                @Yaw.started += instance.OnYaw;
                @Yaw.performed += instance.OnYaw;
                @Yaw.canceled += instance.OnYaw;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Pitch.started += instance.OnPitch;
                @Pitch.performed += instance.OnPitch;
                @Pitch.canceled += instance.OnPitch;
                @StabMode.started += instance.OnStabMode;
                @StabMode.performed += instance.OnStabMode;
                @StabMode.canceled += instance.OnStabMode;
            }
        }
    }
    public FrSkyTaranisX7Actions @FrSkyTaranisX7 => new FrSkyTaranisX7Actions(this);

    // Other
    private readonly InputActionMap m_Other;
    private IOtherActions m_OtherActionsCallbackInterface;
    private readonly InputAction m_Other_Throttle;
    private readonly InputAction m_Other_Yaw;
    private readonly InputAction m_Other_Roll;
    private readonly InputAction m_Other_Pitch;
    public struct OtherActions
    {
        private @Controlls m_Wrapper;
        public OtherActions(@Controlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Throttle => m_Wrapper.m_Other_Throttle;
        public InputAction @Yaw => m_Wrapper.m_Other_Yaw;
        public InputAction @Roll => m_Wrapper.m_Other_Roll;
        public InputAction @Pitch => m_Wrapper.m_Other_Pitch;
        public InputActionMap Get() { return m_Wrapper.m_Other; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OtherActions set) { return set.Get(); }
        public void SetCallbacks(IOtherActions instance)
        {
            if (m_Wrapper.m_OtherActionsCallbackInterface != null)
            {
                @Throttle.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnThrottle;
                @Throttle.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnThrottle;
                @Throttle.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnThrottle;
                @Yaw.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnYaw;
                @Yaw.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnYaw;
                @Yaw.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnYaw;
                @Roll.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnRoll;
                @Pitch.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnPitch;
                @Pitch.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnPitch;
                @Pitch.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnPitch;
            }
            m_Wrapper.m_OtherActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Throttle.started += instance.OnThrottle;
                @Throttle.performed += instance.OnThrottle;
                @Throttle.canceled += instance.OnThrottle;
                @Yaw.started += instance.OnYaw;
                @Yaw.performed += instance.OnYaw;
                @Yaw.canceled += instance.OnYaw;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Pitch.started += instance.OnPitch;
                @Pitch.performed += instance.OnPitch;
                @Pitch.canceled += instance.OnPitch;
            }
        }
    }
    public OtherActions @Other => new OtherActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IXboxActions
    {
        void OnThrottle(InputAction.CallbackContext context);
        void OnStabMode(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
    }
    public interface IKeyboardActions
    {
        void OnThrottle(InputAction.CallbackContext context);
        void OnStabMode(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
    }
    public interface IFrSkyTaranisActions
    {
        void OnThrottle(InputAction.CallbackContext context);
        void OnStabMode(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
    }
    public interface IFSI6SEmulatorActions
    {
        void OnThrottle(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
    }
    public interface IFrSkyTaranisX7Actions
    {
        void OnThrottle(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
        void OnStabMode(InputAction.CallbackContext context);
    }
    public interface IOtherActions
    {
        void OnThrottle(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
    }
}
